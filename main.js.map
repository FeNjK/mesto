{"version":3,"file":"main.js","mappings":"6LAAqBA,EAAAA,WAEnB,WACEC,EACAC,EACAC,EAHF,GAOA,IAHEC,EAGF,EAHEA,gBACAC,EAEF,EAFEA,oBACAC,EACF,EADEA,uB,4FACF,SAAEC,KAAKC,MAAQP,EAAKQ,KAClBF,KAAKG,MAAQT,EAAKU,KAClBJ,KAAKK,OAASX,EAAKY,MACnBN,KAAKO,QAAUb,EAAKc,IACpBR,KAAKS,SAAWf,EAAKgB,MAAMF,IAC3BR,KAAKW,QAAUhB,EACfK,KAAKY,cAAgBhB,EACrBI,KAAKa,iBAAmBhB,EACxBG,KAAKF,oBAAsBA,EAC3BE,KAAKD,sBAAwBA,E,iDAI/B,WAOE,OANoBe,SACnBC,cAAcf,KAAKY,eACnBI,QACAD,cAAc,YACdE,WAAU,K,0BAMb,WAmBE,OAlBAjB,KAAKkB,eAAiBlB,KAAKmB,eAC3BnB,KAAKoB,WAAapB,KAAKkB,eAAeH,cAAc,mBACpDf,KAAKqB,WAAarB,KAAKkB,eAAeH,cAAc,mBACpDf,KAAKsB,WAAatB,KAAKkB,eAAeH,cAAc,mBACpDf,KAAKuB,UAAYvB,KAAKkB,eAAeH,cAAc,kBACnDf,KAAKwB,iBAAmBxB,KAAKkB,eAAeH,cAAc,0BAI1Df,KAAKoB,WAAWK,IAAMzB,KAAKG,MAC3BH,KAAKoB,WAAWM,IAAM1B,KAAKC,MAC3BD,KAAKqB,WAAWM,YAAc3B,KAAKC,MACnCD,KAAKwB,iBAAiBG,YAAc3B,KAAKK,OAAOuB,OAEhD5B,KAAK6B,yBACL7B,KAAK8B,qBACL9B,KAAK+B,iBAEE/B,KAAKkB,iB,gCAId,WAAqB,WACnBlB,KAAKoB,WAAWY,iBAAiB,SAAS,WACxC,EAAKnB,iBAAiB,EAAKZ,MAAO,EAAKE,UAEzCH,KAAKuB,UAAUS,iBAAiB,SAAS,WACvC,EAAKlC,oBAAoB,MAE3BE,KAAKsB,WAAWU,iBAAiB,SAAS,WACxC,EAAKjC,sBAAsB,Q,4BAI/B,WAAiB,WACfC,KAAKK,OAAO4B,SAAQ,SAACC,GACf,EAAKvB,QAAQH,MAAQ0B,EAAQ1B,KAC/B,EAAKe,UAAUY,UAAUC,IAAI,6B,qBAKnC,WAAU,WACR,OAAOC,QAAQrC,KAAKK,OAAOiC,MAAK,SAACJ,GAC/B,OAAOA,EAAQ1B,MAAQ,EAAKG,QAAQH,U,gCAIxC,SAAmBd,GACjBM,KAAKK,OAASX,EAAKY,MACnBN,KAAKwB,iBAAiBG,YAAc3B,KAAKK,OAAOuB,S,qBAGlD,WACE5B,KAAKuB,UAAUY,UAAUC,IAAI,0B,wBAG/B,WACEpC,KAAKuB,UAAUY,UAAUI,OAAO,0B,oCAKlC,WACMvC,KAAKW,QAAQH,MAAQR,KAAKS,UAC5BT,KAAKsB,WAAWiB,W,wBAKpB,WACEvC,KAAKkB,eAAeqB,SACpBvC,KAAKkB,eAAiB,U,sEA1GLzB,G,0KCAA+C,EAAAA,WAEnB,WAAYC,EAAQC,I,4FAAM,SACxB1C,KAAK2C,QAAUF,EACfzC,KAAK4C,MAAQF,EACb1C,KAAK6C,cAAgBJ,EAAOK,cAC5B9C,KAAK+C,eAAiBL,EAAK3B,cAAc0B,EAAOO,sBAChDhD,KAAKiD,qBAAuBR,EAAOS,oBACnClD,KAAKmD,iBAAmBV,EAAOW,gBAC/BpD,KAAKqD,mBAAqBZ,EAAOa,kBACjCtD,KAAKuD,WAAaC,MAAMC,KAAKf,EAAKgB,iBAAiBjB,EAAOK,gB,qDAI5D,WAAmB,WACjB9C,KAAKuD,WAAWtB,SAAQ,SAAC0B,GACvB,EAAKC,gBAAgBD,Q,6BAKzB,SAAiBA,EAAcE,GAC7B,IAAMC,EAAe9D,KAAK4C,MAAM7B,cAAX,WAA6B4C,EAAaI,GAA1C,WACrBJ,EAAaxB,UAAUC,IAAIpC,KAAKmD,kBAChCW,EAAa3B,UAAUC,IAAIpC,KAAKqD,oBAChCS,EAAanC,YAAckC,I,6BAI7B,SAAgBF,GACd,IAAMG,EAAe9D,KAAK4C,MAAM7B,cAAX,WAA6B4C,EAAaI,GAA1C,WACrBJ,EAAaxB,UAAUI,OAAOvC,KAAKmD,kBACnCW,EAAa3B,UAAUI,OAAOvC,KAAKqD,oBACnCS,EAAanC,YAAc,K,iCAI7B,SAAoBgC,GACbA,EAAaK,SAASC,MAGzBjE,KAAK4D,gBAAgBD,GAFrB3D,KAAKkE,gBAAgBP,EAAcA,EAAaQ,qB,+BAOpD,WACMnE,KAAK4C,MAAMwB,iBACbpE,KAAK+C,eAAesB,gBAAgB,YACpCrE,KAAK+C,eAAeZ,UAAUI,OAAOvC,KAAKiD,wBAE1CjD,KAAK+C,eAAeuB,UAAW,EAC/BtE,KAAK+C,eAAeZ,UAAUC,IAAIpC,KAAKiD,yB,gCAK3C,WAAqB,WACnBjD,KAAKuE,oBACLvE,KAAKuD,WAAWtB,SAAQ,SAAC0B,GACvBA,EAAa3B,iBAAiB,SAAS,WACrC,EAAKwC,oBAAoBb,GACzB,EAAKY,4B,8BAMX,WAEEvE,KAAK8B,0B,sEAtEYU,G,0KCAAiC,EAAAA,WACnB,aAA0BC,GAAmB,IAA/BC,EAA+B,EAA/BA,U,4FAA+B,SAC3C3E,KAAK4E,UAAYD,EACjB3E,KAAK6E,WAAa/D,SAASC,cAAc2D,G,8CAG3C,SAAUI,GACR9E,KAAK6E,WAAWE,OAAOD,K,wBAGzB,SAAWA,GACT9E,KAAK6E,WAAWG,QAAQF,K,yBAG1B,SAAYG,GAAO,WACjBA,EAAMhD,SAAQ,SAAA6C,GACZ,EAAKF,UAAUE,W,sEAhBAL,G,kSCAAS,EAAAA,WAEnB,WAAYC,GAAe,Y,4FAAA,mCAwBT,SAACC,GACH,WAAVA,EAAEC,KACJ,EAAKC,WA1BkB,4BAkCP,SAACF,IACfA,EAAEG,OAAOpD,UAAUqD,SAAS,gBAAkBJ,EAAEG,OAAOpD,UAAUqD,SAAS,yBAC5E,EAAKF,WAnCPtF,KAAKyF,OAAS3E,SAASC,cAAcoE,G,yCAMvC,WACEnF,KAAKyF,OAAOtD,UAAUC,IAAI,eAC1BtB,SAASkB,iBAAT,UAAqChC,KAAK0F,mB,mBAM5C,WACE1F,KAAKyF,OAAOtD,UAAUI,OAAO,eAC7BzB,SAAS6E,oBAAT,UAAwC3F,KAAK0F,mB,+BA0B/C,WACE1F,KAAKyF,OAAOzD,iBAAiB,YAAahC,KAAK4F,wB,sEA9C9BV,G,ywCCEAW,EAAAA,SAAAA,I,6rBACnB,WAAYV,GAAe,a,4FAAA,UACzB,cAAMA,IACDW,YAAc,EAAKL,OAAO1E,cAAc,iBAC7C,EAAKgF,cAAgB,EAAKN,OAAO1E,cAAc,mBAHtB,E,iCAM3B,SAAKb,EAAME,GACTJ,KAAK+F,cAAcpE,YAAczB,EACjCF,KAAK8F,YAAYpE,IAAMxB,EACvBF,KAAK8F,YAAYrE,IAAMrB,EACvB,8C,sEAXiByF,CAAuBX,G,ywCCAvBc,EAAAA,SAAAA,I,6rBAKnB,WAAYb,EAAZ,GAA2C,MAAdc,EAAc,EAAdA,WAAc,O,4FAAA,UACzC,cAAMd,IACDe,YAAcD,EACnB,EAAKE,WAAa,EAAKV,OAAO1E,cAAc,gBAC5C,EAAKwC,WAAa,EAAK4C,WAAWzC,iBAAiB,iBACnD,EAAK0C,cAAgB,EAAKX,OAAO1E,cAAc,uBALN,E,4CAY3C,WAAkB,WAKhB,OAJAf,KAAKqG,eAAiB,GACtBrG,KAAKuD,WAAWtB,SAAQ,SAAAqE,GACtB,EAAKD,eAAeC,EAAMpG,MAAQoG,EAAMC,SAEnCvG,KAAKqG,iB,+BAGd,WAAoB,WAClB,sDACArG,KAAKmG,WAAWnE,iBAAiB,UAAU,SAACoD,GAC1CA,EAAEoB,iBACF,EAAKN,YAAY,EAAKO,wB,4BAK1B,WACEzG,KAAKoG,cAAczE,YAAc,gBACjC3B,KAAKoG,cAAc9B,UAAW,I,6BAIhC,WACEtE,KAAKoG,cAAczE,YAAc,YAC/B3B,KAAKoG,cAAc9B,UAAW,I,mBAOlC,WACE,0CACAtE,KAAKmG,WAAWO,a,sEAnDCV,CAAsBd,G,ywCCAtByB,EAAAA,SAAAA,I,6rBACnB,WAAYxB,GAAe,a,4FAAA,UACzB,cAAMA,IACDe,YAAc,EAAKT,OAAO1E,cAAc,kCAC7C,EAAKqF,cAAgB,EAAKX,OAAO1E,cAAc,uBAHtB,E,sCAM3B,SAAU6F,GACR5G,KAAK6G,uBAAyBD,I,+BAGhC,WAAoB,WAClB,sDACE5G,KAAKkG,YAAYlE,iBAAiB,SAAS,SAACoD,GAC5CA,EAAEoB,iBACF,EAAKK,8B,4BAKT,WACE7G,KAAKoG,cAAczE,YAAc,cACjC3B,KAAKoG,cAAc9B,UAAW,I,6BAIhC,WACEtE,KAAKoG,cAAczE,YAAc,KAC/B3B,KAAKoG,cAAc9B,UAAW,O,sEA5BfqC,CAA8BzB,G,0KCF9B4B,EAAAA,WAOnB,cAAsD,IAAzCC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,iBAAkBC,EAAa,EAAbA,Y,4FAAa,SACpDjH,KAAKkH,UAAYpG,SAASC,cAAcgG,GACxC/G,KAAKmH,kBAAoBrG,SAASC,cAAciG,GAChDhH,KAAKoH,YAActG,SAASC,cAAckG,G,+CAS5C,WACE,MAAO,CACLF,SAAU/G,KAAKkH,UAAUvF,YACzBqF,iBAAkBhH,KAAKmH,kBAAkBxF,YACzCsF,WAAYjH,KAAKoH,YAAY3F,O,yBAQjC,SAAYsF,EAAUC,GACpBhH,KAAKkH,UAAUvF,YAAcoF,EAC7B/G,KAAKmH,kBAAkBxF,YAAcqF,I,yBAGvC,SAAYK,GACVrH,KAAKkH,UAAU1G,IAAM6G,EAAS7G,IAC9BR,KAAKkH,UAAUvF,YAAc0F,EAASnH,KACtCF,KAAKmH,kBAAkBxF,YAAc0F,EAASC,MAC9CtH,KAAKoH,YAAY3F,IAAM4F,EAASE,S,+BAGlC,SAAkBC,GACjBxH,KAAKoH,YAAY3F,IAAM+F,EAAeD,OACtCC,EAAeD,OAAOpF,UAAUC,IAAI,uB,yEA7ClB0E,G,0KCAAW,EAAAA,WACnB,WAAYC,I,4FAAS,SAEnB1H,KAAK2H,KAAOD,EAAQE,IACpB5H,KAAK6H,SAAWH,EAAQI,Q,mDAI1B,SAAeC,GACb,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAR,0BAAkCJ,EAAIK,W,yBAG/C,WAAc,WACZ,OAAOC,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,aAA0B,CACpCW,OAAQ,MACRR,QAAS9H,KAAK6H,WAEfU,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,yBAIX,SAAYvI,EAAMoH,GAAO,WACvB,OAAOe,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,aAA0B,CACpCW,OAAQ,QACRR,QAAS9H,KAAK6H,SACda,KAAMC,KAAKC,UAAU,CACnB1I,KAAAA,EACAoH,MAAAA,MAGHiB,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,2BAIX,SAAcrI,GAAM,WAClB,OAAOiI,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,oBAAiC,CAC3CW,OAAQ,QACRR,QAAS9H,KAAK6H,SACda,KAAMC,KAAKC,UAAU,CACnBrB,OAAQnH,MAGXmI,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,6BAIX,WAAkB,WAChB,OAAOJ,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,UAAuB,CACjCW,OAAQ,MACRR,QAAS9H,KAAK6H,WAEfU,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,wBAIX,SAAW/I,GAAM,WACf,OAAO2I,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,UAAuB,CACjCW,OAAQ,OACRR,QAAS9H,KAAK6H,SACda,KAAMC,KAAKC,UAAU,CACnB1I,KAAMR,EAAKQ,KACXE,KAAMV,EAAKU,SAGdmI,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,wBAIX,SAAWI,GAAQ,WACjB,OAAOR,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,kBAAuBkB,GAAU,CAC3CP,OAAQ,SACRR,QAAS9H,KAAK6H,WAEfU,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,yBAIX,SAAYI,GAAQ,WAClB,OAAOR,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,kBAAuBkB,EAAvB,UAAuC,CACjDP,OAAQ,MACRR,QAAS9H,KAAK6H,WAEfU,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,O,4BAIX,SAAeI,GAAQ,WACrB,OAAOR,MAAM,GAAD,OAAIrI,KAAK2H,KAAT,kBAAuBkB,EAAvB,UAAuC,CACjDP,OAAQ,SACRR,QAAS9H,KAAK6H,WAEfU,MAAK,SAACR,GAAD,OAAS,EAAKS,eAAeT,MAClCQ,MAAK,SAACE,GACL,OAAOA,U,sEA/GQhB,GCGRqB,EAAahI,SAASC,cAAc,iCACpCgI,EAAYjI,SAASC,cAAc,wBACnCiI,EAAelI,SAASC,cAAc,gCAItCkI,GADenI,SAASC,cAAc,uBAClBD,SAASC,cAAc,gCAC3CmI,EAAmBpI,SAASC,cAAc,8BAC1CoI,EAAqBrI,SAASC,cAAc,4BAG5CqI,EAAgBH,EAAkBlI,cAAc,8BAChDsI,EAAwBJ,EAAkBlI,cAAc,uCAKxD0B,EAAS,CACpB6G,aAAc,eACdxG,cAAe,gBACfE,qBAAsB,sBACtBE,oBAAqB,8BACrBE,gBAAiB,qBACjBE,kBAAmB,oC,0GCCrB,IAAMiG,EAA6B,IAAI/G,EAAcC,EAAQwG,GACvDO,EAA4B,IAAIhH,EAAcC,EAAQyG,GACtDO,EAA8B,IAAIjH,EAAcC,EAAQ0G,GAG9DI,EAA2BG,mBAC3BF,EAA0BE,mBAC1BD,EAA4BC,mBAI5B,IAAMC,EAAM,IAAIlC,EAAI,CAClBG,IAAK,8CACLE,QAAS,CACP,eAAgB,mBAChB8B,cAAe,0CAKbC,EAAiB,IAAIhE,EAAe,0BAC1CgE,EAAeC,oBAGf,IAGInK,EAHEoK,EAAkB,IAAIpD,EAAsB,4BAClDoD,EAAgBD,oBAQhB5B,QAAQ8B,IAAI,CAACL,EAAIM,cAAeN,EAAIO,oBACjC3B,MAAK,YAAkC,I,IAAA,G,EAAA,E,4CAAA,I,gxBAAhC4B,EAAgC,KAAtBC,EAAsB,KACtCzK,EAASwK,EACT9C,GAASgD,YAAYF,GACrBG,GAAaC,YAAYH,MAE1BI,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAGhB,IAAMH,GAAe,IAAI7F,EAAQ,CAC/BE,SAAU,SAACG,GACPwF,GAAaM,UAAUC,GAAW/F,MAErC,aAGH,SAAS+F,GAAWnL,GAClB,IAAMoL,EAAO,IAAIrL,EAAKC,EAAMC,EAAQ,YAEpC,CAAEE,gBAAiB,SAACK,EAAME,GACtByJ,EAAekB,KAAK7K,EAAME,IAG5BN,oBAAqB,SAACgL,GAChBA,EAAKE,UACPrB,EAAIsB,eAAeH,EAAKvK,SACrBgI,MAAK,SAAC7I,GACLoL,EAAKI,mBAAmBxL,GACxBoL,EAAKK,gBAENX,OAAM,SAACC,GACNC,QAAQC,IAAR,gDAAqDF,OAGzDd,EAAIyB,YAAYN,EAAKvK,SAClBgI,MAAK,SAAC7I,GACLoL,EAAKI,mBAAmBxL,GACxBoL,EAAKO,aAENb,OAAM,SAACC,GACNC,QAAQC,IAAR,kDAAuDF,QAK/D1K,sBAAuB,SAAC+K,GACtBf,EAAgBgB,OAChBhB,EAAgBuB,WAAU,WACxBvB,EAAgBwB,iBAChB5B,EAAI6B,WAAWV,EAAKvK,SACjBgI,MAAK,WACJwB,EAAgBzE,QAChBwF,EAAKW,gBAENjB,OAAM,SAACC,GACNC,QAAQC,IAAR,mDAAwDF,OAEzDiB,SAAQ,kBACP3B,EAAgB4B,2BAK1B,OAAOb,EAAKc,eAId7C,EAAU/G,iBAAiB,SAAS,WAClCkH,EAAiBxC,QACjB8C,EAA0BqC,mBAC1BrC,EAA0BjF,oBAC1BuH,GAAaf,UAGf,IAAMe,GAAe,IAAI9F,EAAc,kBACrC,CAAEC,WAAY,SAAC8F,GACbD,GAAaP,iBACb5B,EAAIqC,WAAW,CACb9L,KAAM6L,EAAS,cACf3L,KAAM2L,EAAS,kBAEdxD,MAAK,SAACR,GACL+D,GAAaxG,QACbgF,GAAa2B,WAAWpB,GAAW9C,OAEpCyC,OAAM,SAACC,GACNC,QAAQC,IAAR,8BAAmCF,OAEpCiB,SAAQ,WACPI,GAAaH,wBAOftE,GAAW,IAAIP,EAAS,CAC5BC,SAAU,sBACVC,iBAAkB,+BAClBC,WAAY,0BAad6B,EAAW9G,iBAAiB,SAAS,WARrC,IACQmI,IAAW9C,GAAS4C,cAC1Bb,EAAc7C,MAAQ4D,EAASpD,SAC/BsC,EAAsB9C,MAAQ4D,EAASnD,iBAOvCuC,EAA2BsC,mBAC3BtC,EAA2BhF,oBAC3B2H,GAAcnB,UAGhB,IAAMmB,GAAgB,IAAIlG,EAAc,mBACtC,CAAEC,WAAY,SAACkG,GACbD,GAAcX,iBACd5B,EAAIyC,YACFD,EAAW,aACXA,EAAW,kBAEV5D,MAAK,SAAC4D,GACLD,GAAc5G,QACd+B,GAAS+E,YACPD,EAAYjM,KACZiM,EAAY7E,UAGfkD,OAAM,SAACC,GACNC,QAAQC,IAAR,8BAAmCF,OAEpCiB,SAAQ,WACPQ,GAAcP,wBAMtB3C,EAAahH,iBAAiB,SAAS,WACrCyH,EAA4BoC,mBAC5BpC,EAA4BlF,oBAC5B8H,GAAgBtB,UAIlB,IAAMsB,GAAkB,IAAIrG,EAAc,qBACxC,CAAEC,WAAY,SAACkG,GACbE,GAAgBd,iBAChB5B,EAAI2C,cAAcH,EAAY,mBAC3B5D,MAAK,SAACR,GACLsE,GAAgB/G,QAChB+B,GAASkF,kBAAkBxE,MAE5ByC,OAAM,SAACC,GACNC,QAAQC,IAAR,8BAAmCF,OAEpCiB,SAAQ,WACPW,GAAgBV,wBAOxBO,GAAcpC,oBACdgC,GAAahC,oBACbuC,GAAgBvC,qB","sources":["webpack://yandex.praktikum/./src/scripts/components/Card.js","webpack://yandex.praktikum/./src/scripts/components/FormValidator.js","webpack://yandex.praktikum/./src/scripts/components/Section.js","webpack://yandex.praktikum/./src/scripts/components/Popup.js","webpack://yandex.praktikum/./src/scripts/components/PopupWithImage.js","webpack://yandex.praktikum/./src/scripts/components/PopupWithForm.js","webpack://yandex.praktikum/./src/scripts/components/PopupWithСonfirmation.js","webpack://yandex.praktikum/./src/scripts/components/UserInfo.js","webpack://yandex.praktikum/./src/scripts/components/Api.js","webpack://yandex.praktikum/./src/scripts/utils/constants.js","webpack://yandex.praktikum/./src/pages/index.js"],"sourcesContent":["export default class Card {\r\n\r\n  constructor(\r\n    data,\r\n    userId,\r\n    cardSelector,\r\n  { handleCardClick,\r\n    handleLikeCardClick,\r\n    handleDeleteCardClick }) \r\n  { this._name = data.name;\r\n    this._link = data.link;\r\n    this._likes = data.likes;\r\n    this._cardId = data._id;\r\n    this._ownerId = data.owner._id;\r\n    this._userId = userId;\r\n    this._cardSelector = cardSelector;\r\n    this._handleCardClick = handleCardClick;\r\n    this.handleLikeCardClick = handleLikeCardClick;\r\n    this.handleDeleteCardClick = handleDeleteCardClick;\r\n  }\r\n\r\n  // Метод возврата шаблона DOM-разметки\r\n  _getTemplate() {\r\n    const cardElement = document\r\n    .querySelector(this._cardSelector)\r\n    .content\r\n    .querySelector('.element')\r\n    .cloneNode(true);\r\n    \r\n    return cardElement;\r\n  }\r\n\r\n  // Метод добавления новой карточки\r\n  generateCard() {\r\n    this._cardContainer = this._getTemplate();\r\n    this._cardImage = this._cardContainer.querySelector('.element__image');\r\n    this._cardTitle = this._cardContainer.querySelector('.element__title');\r\n    this._cardTrash = this._cardContainer.querySelector('.element__trash');\r\n    this._cardMark = this._cardContainer.querySelector('.element__mark');\r\n    this._cardMarkCounter = this._cardContainer.querySelector('.element__mark-counter');\r\n    \r\n    // Прописываем связи между объектами массива и свойствами, \r\n    // присвоенными элементам страницы\r\n    this._cardImage.src = this._link;\r\n    this._cardImage.alt = this._name;\r\n    this._cardTitle.textContent = this._name;\r\n    this._cardMarkCounter.textContent = this._likes.length;\r\n    \r\n    this._showDeleteButtonState();\r\n    this._setEventListeners();\r\n    this._checkCardLike()\r\n\r\n    return this._cardContainer;\r\n  }\r\n\r\n  // Слушатели срабатывания методов\r\n  _setEventListeners() {\r\n    this._cardImage.addEventListener('click', () => {\r\n      this._handleCardClick(this._name, this._link);\r\n    });\r\n    this._cardMark.addEventListener('click', () => {\r\n      this.handleLikeCardClick(this);\r\n    });\r\n    this._cardTrash.addEventListener('click', () => {\r\n      this.handleDeleteCardClick(this);\r\n    });\r\n  }\r\n\r\n  _checkCardLike() {\r\n    this._likes.forEach((element) => {\r\n      if (this._userId._id === element._id) {\r\n        this._cardMark.classList.add('element__mark_active');\r\n      }\r\n    });\r\n  }\r\n\r\n  isLiked() {\r\n    return Boolean(this._likes.find((element) => {\r\n      return element._id === this._userId._id;\r\n    })\r\n  )}\r\n\r\n  updateLikesCounter(data) {\r\n    this._likes = data.likes;\r\n    this._cardMarkCounter.textContent = this._likes.length;\r\n  }\r\n  \r\n  addLike() {\r\n    this._cardMark.classList.add('element__mark_active');\r\n  }\r\n\r\n  deleteLike() {\r\n    this._cardMark.classList.remove('element__mark_active');\r\n  }\r\n\r\n  // Только добавлявший карточку сможет её удалить\r\n  // в противном случае иконка корзины не видна\r\n  _showDeleteButtonState() {\r\n    if (this._userId._id !== this._ownerId) {\r\n      this._cardTrash.remove();\r\n    }\r\n  }\r\n\r\n  // Метод удаления карточки\r\n  deleteCard() {\r\n    this._cardContainer.remove();\r\n    this._cardContainer = null;\r\n  }\r\n}","export default class FormValidator {\r\n\r\n  constructor(config, form) {\r\n    this._config = config;\r\n    this._form = form;\r\n    this._inputElement = config.inputSelector;\r\n    this._buttonElement = form.querySelector(config.submitButtonSelector);\r\n    this._inactiveButtonClass = config.inactiveButtonClass;\r\n    this._inputErrorClass = config.inputErrorClass;\r\n    this._errorMessageClass = config.errorMessageClass;\r\n    this._inputList = Array.from(form.querySelectorAll(config.inputSelector));\r\n  }\r\n\r\n  // Метод очистки полей ввода (на передачу в index.js)\r\n  removeInputError() {\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n  }\r\n\r\n  // Метод показа сообщения об ошибке при валидации\r\n  _showInputError (inputElement, errorMessage) {\r\n    const errorElement = this._form.querySelector(`#${inputElement.id}-error`);\r\n    inputElement.classList.add(this._inputErrorClass);\r\n    errorElement.classList.add(this._errorMessageClass);\r\n    errorElement.textContent = errorMessage;\r\n  }\r\n\r\n  // Метод сокрытия сообщения об ошибке при валидации\r\n  _hideInputError(inputElement) {\r\n    const errorElement = this._form.querySelector(`#${inputElement.id}-error`);\r\n    inputElement.classList.remove(this._inputErrorClass);\r\n    errorElement.classList.remove(this._errorMessageClass);\r\n    errorElement.textContent = '';\r\n  };\r\n\r\n  // Метод проверки поля ввода на валидность\r\n  _checkInputValidity(inputElement) {\r\n    if (!inputElement.validity.valid) {\r\n      this._showInputError(inputElement, inputElement.validationMessage);\r\n    } else {\r\n      this._hideInputError(inputElement);\r\n    }\r\n  };\r\n\r\n  // Метод условий состояния кнопки сохранения данных формы (на передачу в index.js)\r\n  toggleButtonState() {\r\n    if (this._form.checkValidity()) {\r\n      this._buttonElement.removeAttribute('disabled');\r\n      this._buttonElement.classList.remove(this._inactiveButtonClass);\r\n    } else {\r\n      this._buttonElement.disabled = true;\r\n      this._buttonElement.classList.add(this._inactiveButtonClass);\r\n    }\r\n  }\r\n\r\n  // Метод проверки на валидацию нескольких полей ввода\r\n  _setEventListeners() {\r\n    this.toggleButtonState();\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', () => {\r\n        this._checkInputValidity(inputElement);\r\n        this.toggleButtonState();\r\n      });\r\n    });\r\n  }\r\n  \r\n  // Метод включения валидации формы\r\n  enableValidation() {\r\n    // Отмена стандартного поведения формы перенесена в модуль PopupWithForm\r\n    this._setEventListeners();\r\n  };\r\n}","export default class Section {\r\n  constructor({ renderer }, conteinerSelector) {\r\n    this._renderer = renderer; // renderer — это функция\r\n    this._container = document.querySelector(conteinerSelector);\r\n  }\r\n\r\n  addAppend(item) {\r\n    this._container.append(item);\r\n  }\r\n\r\n  addPrepend(item) {\r\n    this._container.prepend(item);\r\n  }\r\n\r\n  renderItems(items) {\r\n    items.forEach(item => {\r\n      this._renderer(item); // вызываем renderer, передав item\r\n    });\r\n  }\r\n}","export default class Popup {\r\n  \r\n  constructor(popupSelector) {\r\n    this._popup = document.querySelector(popupSelector);\r\n  }\r\n\r\n  /**\r\n   * Метод открытия модальных окон\r\n   */\r\n  open() {\r\n    this._popup.classList.add('popup_activ');\r\n    document.addEventListener(`keydown`, this._handleEscClose);\r\n  }\r\n\r\n  /**\r\n   * Метод закрытия модальных окон\r\n   */\r\n  close() {\r\n    this._popup.classList.remove('popup_activ');\r\n    document.removeEventListener(`keydown`, this._handleEscClose);\r\n  }\r\n\r\n  /**\r\n   * Метод закрытия модальных окон нажатием на клавишу \"Esc\"\r\n   * @param {Event} e event\r\n   */\r\n  _handleEscClose = (e) => {\r\n    if (e.key === 'Escape') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Универсальный метод закрытия модальных окон \r\n   * нажатием на оверлей или \"крестик\" модального окна\r\n   */\r\n  _handlePopupClose = (e) => {\r\n    if (e.target.classList.contains('popup_activ') || e.target.classList.contains('popup__close-button')) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Добавляем слушатели клика для закрытия попапа (разными способами)\r\n   */\r\n  setEventListeners() {\r\n    this._popup.addEventListener('mousedown', this._handlePopupClose);\r\n  }\r\n}","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    this._popupImage = this._popup.querySelector('.popup__image');\r\n    this._popupCaption = this._popup.querySelector('.popup__caption');\r\n  }\r\n\r\n  open(name, link) {\r\n    this._popupCaption.textContent = name;\r\n    this._popupImage.alt = name;\r\n    this._popupImage.src = link;\r\n    super.open();\r\n  }\r\n}","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithForm extends Popup {\r\n  \r\n  /**\r\n   * Кроме селектора попапа принимает в конструктор колбэк сабмита формы\r\n   */\r\n  constructor(popupSelector, { submitForm }) {\r\n    super(popupSelector);\r\n    this._submitForm = submitForm;\r\n    this._popupForm = this._popup.querySelector('.popup__form');\r\n    this._inputList = this._popupForm.querySelectorAll('.popup__input');\r\n    this._submitButton = this._popup.querySelector('.popup__save-button');\r\n  }\r\n\r\n  /**\r\n   * @returns сбор данных всех полей формы\r\n   * результатом является обект в котором находятся все данные\r\n   */\r\n  _getInputValues() {\r\n    this._inputsСontent = {};\r\n    this._inputList.forEach(input => {\r\n      this._inputsСontent[input.name] = input.value;\r\n    });\r\n    return this._inputsСontent;\r\n  }\r\n\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._popupForm.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n      this._submitForm(this._getInputValues());\r\n    })\r\n  }\r\n\r\n  // Метод изменения кнопки в момент отправки формы на сервер\r\n  processLoading() {\r\n    this._submitButton.textContent = 'Сохранение...';\r\n    this._submitButton.disabled = true;\r\n  }\r\n\r\n  // Обычное состояние кнопки отправки\r\n  normalCondition() {\r\n    this._submitButton.textContent = 'Сохранить';\r\n      this._submitButton.disabled = false;\r\n  }\r\n  \r\n  /**\r\n   * Перезапись родительского метода close, \r\n   * так как форма должна ещё и сбрасываться\r\n   */\r\n  close() {\r\n    super.close();\r\n    this._popupForm.reset();\r\n  }\r\n}","import Popup from './Popup.js'\r\n\r\nexport default class PopupWithСonfirmation extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    this._submitForm = this._popup.querySelector('.popup__form_type_confirmation');;\r\n    this._submitButton = this._popup.querySelector('.popup__save-button');\r\n  }\r\n\r\n  setSubmit(targetSubmit) {\r\n    this._submitHandlerCallback = targetSubmit;\r\n  }\r\n  \r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n      this._submitForm.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      this._submitHandlerCallback();\r\n    });\r\n  }\r\n\r\n  // Метод изменения кнопки в момент отправки формы на сервер\r\n  processLoading() {\r\n    this._submitButton.textContent = 'Исполняю...';\r\n    this._submitButton.disabled = true;\r\n  }\r\n\r\n  // Обычное состояние кнопки отправки\r\n  normalCondition() {\r\n    this._submitButton.textContent = 'Да';\r\n      this._submitButton.disabled = false;\r\n  }\r\n}","export default class UserInfo {\r\n\r\n  /**\r\n   * Конструктор принимает в себя\r\n   * @param {object} объект с селекторами двух элементов:\r\n   * элемента имени пользователя и элемента информации о себе\r\n   */\r\n  constructor({userName, userActivityType, userAvatar}) {\r\n    this._userName = document.querySelector(userName);\r\n    this._userActivityType = document.querySelector(userActivityType);\r\n    this._userAvatar = document.querySelector(userAvatar);\r\n  }\r\n\r\n  /**\r\n   * Метод, который\r\n   * @returns {object} объект с данными пользователя\r\n   * Этот метод пригодится когда данные пользователя нужно будет \r\n   * подставить в форму при открытии модального окна с данными профиля\r\n   */\r\n  getUserInfo() {\r\n    return {\r\n      userName: this._userName.textContent,\r\n      userActivityType: this._userActivityType.textContent,\r\n      userAvatar: this._userAvatar.src\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод, принимающий новые данные пользователя\r\n   * и добавляет их на страницу при сабмите\r\n   */\r\n  setUserInfo(userName, userActivityType) {\r\n    this._userName.textContent = userName;\r\n    this._userActivityType.textContent = userActivityType;\r\n  }\r\n  \r\n  setUserData(userInfo) {\r\n    this._userName._id = userInfo._id;\r\n    this._userName.textContent = userInfo.name;\r\n    this._userActivityType.textContent = userInfo.about;\r\n    this._userAvatar.src = userInfo.avatar;\r\n  }\r\n\r\n  setUserInfoAvatar(userInfoAvatar) {\r\n   this._userAvatar.src = userInfoAvatar.avatar;\r\n   userInfoAvatar.avatar.classList.add('.profile__avatar');\r\n  }\r\n}","export default class Api {\r\n  constructor(options) {\r\n    // Делал как в ТЗ по пункту \"Требования к коду\"!\r\n    this._url = options.url;\r\n    this._headers = options.headers;\r\n  }\r\n\r\n  // \"res\" в парамете - это значит \"response\"\r\n  _ringingServer(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n      // если ошибка, отклоняем промис\r\n    return Promise.reject(`Возникла ошибка ${res.status}`);\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  setUserInfo(name, about) {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  setUserAvatar(link) {\r\n    return fetch(`${this._url}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: link\r\n      })\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  addNewCard(data) {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        link: data.link\r\n      })\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  removeCard(cardId) {\r\n    return fetch(`${this._url}/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: this._headers\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  setLikeCard(cardId) {\r\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\r\n      method: 'PUT',\r\n      headers: this._headers\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  deleteLikeCard(cardId) {\r\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\r\n      method: 'DELETE',\r\n      headers: this._headers\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n}","// DOM-ЭЛЕМЕНТЫ !!!\r\n\r\n// Кнопки\r\nexport const buttonEdit = document.querySelector('.profile-info__editing-button'); //Нашли кнопку редактирования профиля\r\nexport const buttonAdd = document.querySelector('.profile__add-button'); //Нашли кнопку добавления карточки\r\nexport const buttonAvatar = document.querySelector('.profile-info__avatar-button');\r\n\r\n// Формы, отображенные на странице\r\nexport const formUserData = document.querySelector('.profile-info__data');//нашли форму с данными профиля пользователя\r\nexport const popupFormUserData = document.querySelector('.popup__form_type_user-data');//Форма с данными профиля пользователя\r\nexport const popupFormNewCard = document.querySelector('.popup__form_type_new-card');//Форма с данными новой карточки с картинкой\r\nexport const popupFormAddAvatar = document.querySelector('.popup__form_type_avatar');\r\n\r\n// Поля заполнения данных ПРОФИЛЯ в модальном окне\r\nexport const popupUserName = popupFormUserData.querySelector('.popup__input_content_name');//Поле с именем пользователя\r\nexport const popupUserActivityType = popupFormUserData.querySelector('.popup__input_content_activity-type');//Поле с родом деятельности пользователя\r\n\r\n// СЕЛЕКТОРЫ !!!\r\n\r\n// Конфигурационный файл валидации\r\nexport const config = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__save-button',\r\n  inactiveButtonClass: 'popup__save-button_disabled',\r\n  inputErrorClass: 'popup__input_error',\r\n  errorMessageClass: 'popup__validation-message_active'\r\n};","import '../pages/index.css'; // добавил импорт главного файла стилей для нормальной работы «Вебпака»!!!\r\n//import initialCards from '../scripts/utils/initialCards.js'; // импорт массива исходного массива изображений\r\n\r\n// Импорт подключаемых модулей\r\nimport Card from '../scripts/components/Card.js';\r\nimport FormValidator from '../scripts/components/FormValidator.js';\r\nimport Section from '../scripts/components/Section.js';\r\nimport PopupWithImage from '../scripts/components/PopupWithImage.js';\r\nimport PopupWithForm from '../scripts/components/PopupWithForm.js';\r\nimport PopupWithСonfirmation from '../scripts/components/PopupWithСonfirmation.js';\r\nimport UserInfo from '../scripts/components/UserInfo.js';\r\nimport Api from '../scripts/components/Api.js';\r\n\r\n// Импорт значений переменных, используемых для реализации работы модулей\r\nimport {\r\n  buttonEdit,\r\n  buttonAdd,\r\n  buttonAvatar,\r\n  popupFormUserData,\r\n  popupUserName,\r\n  popupUserActivityType,\r\n  popupFormNewCard,\r\n  popupFormAddAvatar,\r\n  config\r\n} from '../scripts/utils/constants.js';\r\n\r\n// Создание экземпляров класса FormValidator для каждой формы\r\nconst popupFormUserDataValidator = new FormValidator(config, popupFormUserData);\r\nconst popupFormNewCardValidator = new FormValidator(config, popupFormNewCard);\r\nconst popupFormAddAvatarValidator = new FormValidator(config, popupFormAddAvatar);\r\n\r\n// Вызов соответствующих свойств у оных объектов\r\npopupFormUserDataValidator.enableValidation();\r\npopupFormNewCardValidator.enableValidation();\r\npopupFormAddAvatarValidator.enableValidation();\r\n\r\n// Создание экземпляра класса Api\r\n// Делал как в ТЗ по пункту \"Требования к коду\"!\r\nconst api = new Api({\r\n  url: 'https://mesto.nomoreparties.co/v1/cohort-43',\r\n  headers: {\r\n    'Content-type': 'application/json',\r\n    authorization: '10bf8282-16d5-46f1-976c-28311168fc94'\r\n  },\r\n})\r\n\r\n// Создание экземпляра класса с презентируемой картокой\r\nconst showImagePopup = new PopupWithImage('.popup_task_show-image');\r\nshowImagePopup.setEventListeners();\r\n\r\n// Создание экземпляра класса подтверждения удаления карточки\r\nconst popupDeleteCard = new PopupWithСonfirmation('.popup_type_confirmation');\r\npopupDeleteCard.setEventListeners();\r\n\r\nlet userId;\r\n\r\n/**\r\n * Передаём массив с промисами методу Promise.all\r\n * и получаем данные с сервера\r\n */\r\nPromise.all([api.getUserInfo(), api.getInitialCards()])\r\n  .then(([userData, initialCardsData]) => {\r\n    userId = userData;\r\n    userInfo.setUserData(userData);\r\n    photoLibrary.renderItems(initialCardsData);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  })\r\n\r\nconst photoLibrary = new Section({\r\n  renderer: (item) => {\r\n      photoLibrary.addAppend(createCard(item));\r\n  }\r\n}, '.elements');\r\n\r\n// Создание экземпляра класса Card\r\nfunction createCard(data) {\r\n  const card = new Card(data, userId, '.template',\r\n  \r\n  { handleCardClick: (name, link) => {\r\n      showImagePopup.open(name, link);\r\n      },\r\n  \r\n    handleLikeCardClick: (card) => {\r\n      if (card.isLiked()) {\r\n        api.deleteLikeCard(card._cardId)\r\n          .then((data) => {\r\n            card.updateLikesCounter(data);\r\n            card.deleteLike();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Тут какая-то ошибка c удалением лайка ${err}`)\r\n          })\r\n        } else {\r\n        api.setLikeCard(card._cardId)\r\n          .then((data) => {\r\n            card.updateLikesCounter(data);\r\n            card.addLike();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Тут какая-то ошибка c добавлением лайка ${err}`)\r\n          })\r\n        }\r\n      },\r\n\r\n    handleDeleteCardClick: (card) => {\r\n      popupDeleteCard.open();\r\n      popupDeleteCard.setSubmit(() => {\r\n        popupDeleteCard.processLoading();\r\n        api.removeCard(card._cardId)\r\n          .then(() => {\r\n            popupDeleteCard.close();\r\n            card.deleteCard();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Тут какая-то ошибка с удалением карточки ${err}`)\r\n          })\r\n          .finally(() => \r\n            popupDeleteCard.normalCondition())\r\n          })\r\n        }\r\n      }\r\n    );\r\n  return card.generateCard();\r\n}\r\n\r\n// Функция открытия модального окна кнопкой добавления карточки\r\nbuttonAdd.addEventListener('click', () => {\r\n  popupFormNewCard.reset();\r\n  popupFormNewCardValidator.removeInputError();\r\n  popupFormNewCardValidator.toggleButtonState();\r\n  popupFormAdd.open();\r\n});\r\n\r\nconst popupFormAdd = new PopupWithForm('.popup_task_add',\r\n  { submitForm: (cardData) => {\r\n    popupFormAdd.processLoading();\r\n    api.addNewCard({\r\n      name: cardData['card-title'],\r\n      link: cardData['picture-link']\r\n      })\r\n      .then((res) => {\r\n        popupFormAdd.close();\r\n        photoLibrary.addPrepend(createCard(res));\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка ${err}`)\r\n      })\r\n      .finally(() => {\r\n        popupFormAdd.normalCondition();\r\n      });\r\n    }\r\n  }\r\n)\r\n\r\n// Создание экземпляра класса с данными пользователя\r\nconst userInfo = new UserInfo({\r\n  userName: '.profile-info__name',\r\n  userActivityType: '.profile-info__activity-type',\r\n  userAvatar: '.profile-info__avatar'\r\n});\r\n\r\n// Функция получения значений инпутов \r\n// при открытии попапа формы редактирования профиля\r\nfunction getInputValuesFormEdit() {\r\n  const userData = userInfo.getUserInfo();\r\n  popupUserName.value = userData.userName;// поле \"введите ваше имя\" фигурируют данные ранее указанные в имени пользователя профиля\r\n  popupUserActivityType.value = userData.userActivityType;// в поле \"каков род ваших занятий\" фигурируют данные ранее указанные в соответствующем поле профиля\r\n}\r\n\r\n// Реализация функции редактирования данных профиля\r\n// функция показывающая, что при открытии модального окна мы видим\r\nbuttonEdit.addEventListener('click', () => {  \r\n  getInputValuesFormEdit(); //вызов функции получения значений инпутов при открытии попапа\r\n  popupFormUserDataValidator.removeInputError();\r\n  popupFormUserDataValidator.toggleButtonState();\r\n  popupFormEdit.open();\r\n});\r\n\r\nconst popupFormEdit = new PopupWithForm('.popup_task_edit',\r\n  { submitForm: (profileData) => {\r\n    popupFormEdit.processLoading();\r\n    api.setUserInfo(\r\n      profileData['profile_name'],\r\n      profileData['type_of_activity']\r\n      )\r\n      .then((profileData) => {\r\n        popupFormEdit.close();\r\n        userInfo.setUserInfo(\r\n          profileData.name,\r\n          profileData.about\r\n        )\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка ${err}`)\r\n      })\r\n      .finally(() => {\r\n        popupFormEdit.normalCondition();\r\n      });\r\n    }\r\n  }\r\n)\r\n\r\nbuttonAvatar.addEventListener('click', () => {\r\n  popupFormAddAvatarValidator.removeInputError();\r\n  popupFormAddAvatarValidator.toggleButtonState();\r\n  popupFormAvatar.open();\r\n});\r\n\r\n// Создание экземпляра класса формы добавления карточки\r\nconst popupFormAvatar = new PopupWithForm('.popup_task_avatar',\r\n  { submitForm: (profileData) => {\r\n    popupFormAvatar.processLoading();\r\n    api.setUserAvatar(profileData['profile-avatar'])\r\n      .then((res) => {\r\n        popupFormAvatar.close();\r\n        userInfo.setUserInfoAvatar(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка ${err}`)\r\n      })\r\n      .finally(() => {\r\n        popupFormAvatar.normalCondition();\r\n      });\r\n    }\r\n  }\r\n);\r\n\r\n// Навешиваем слушатели на экземпляры классов форм\r\npopupFormEdit.setEventListeners();\r\npopupFormAdd.setEventListeners();\r\npopupFormAvatar.setEventListeners();"],"names":["Card","data","userId","cardSelector","handleCardClick","handleLikeCardClick","handleDeleteCardClick","this","_name","name","_link","link","_likes","likes","_cardId","_id","_ownerId","owner","_userId","_cardSelector","_handleCardClick","document","querySelector","content","cloneNode","_cardContainer","_getTemplate","_cardImage","_cardTitle","_cardTrash","_cardMark","_cardMarkCounter","src","alt","textContent","length","_showDeleteButtonState","_setEventListeners","_checkCardLike","addEventListener","forEach","element","classList","add","Boolean","find","remove","FormValidator","config","form","_config","_form","_inputElement","inputSelector","_buttonElement","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorMessageClass","errorMessageClass","_inputList","Array","from","querySelectorAll","inputElement","_hideInputError","errorMessage","errorElement","id","validity","valid","_showInputError","validationMessage","checkValidity","removeAttribute","disabled","toggleButtonState","_checkInputValidity","Section","conteinerSelector","renderer","_renderer","_container","item","append","prepend","items","Popup","popupSelector","e","key","close","target","contains","_popup","_handleEscClose","removeEventListener","_handlePopupClose","PopupWithImage","_popupImage","_popupCaption","PopupWithForm","submitForm","_submitForm","_popupForm","_submitButton","_inputsСontent","input","value","preventDefault","_getInputValues","reset","PopupWithСonfirmation","targetSubmit","_submitHandlerCallback","UserInfo","userName","userActivityType","userAvatar","_userName","_userActivityType","_userAvatar","userInfo","about","avatar","userInfoAvatar","Api","options","_url","url","_headers","headers","res","ok","json","Promise","reject","status","fetch","method","then","_ringingServer","result","body","JSON","stringify","cardId","buttonEdit","buttonAdd","buttonAvatar","popupFormUserData","popupFormNewCard","popupFormAddAvatar","popupUserName","popupUserActivityType","formSelector","popupFormUserDataValidator","popupFormNewCardValidator","popupFormAddAvatarValidator","enableValidation","api","authorization","showImagePopup","setEventListeners","popupDeleteCard","all","getUserInfo","getInitialCards","userData","initialCardsData","setUserData","photoLibrary","renderItems","catch","err","console","log","addAppend","createCard","card","open","isLiked","deleteLikeCard","updateLikesCounter","deleteLike","setLikeCard","addLike","setSubmit","processLoading","removeCard","deleteCard","finally","normalCondition","generateCard","removeInputError","popupFormAdd","cardData","addNewCard","addPrepend","popupFormEdit","profileData","setUserInfo","popupFormAvatar","setUserAvatar","setUserInfoAvatar"],"sourceRoot":""}