{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex.praktikum/./src/scripts/components/Card.js","webpack://yandex.praktikum/./src/scripts/components/FormValidator.js","webpack://yandex.praktikum/./src/scripts/components/Section.js","webpack://yandex.praktikum/./src/scripts/components/Popup.js","webpack://yandex.praktikum/./src/scripts/components/PopupWithImage.js","webpack://yandex.praktikum/./src/scripts/components/PopupWithForm.js","webpack://yandex.praktikum/./src/scripts/components/PopupWithСonfirmation.js","webpack://yandex.praktikum/./src/scripts/components/UserInfo.js","webpack://yandex.praktikum/./src/scripts/components/Api.js","webpack://yandex.praktikum/./src/scripts/utils/constants.js","webpack://yandex.praktikum/./src/pages/index.js"],"sourcesContent":["export default class Card {\r\n\r\n  constructor(\r\n    {data},\r\n    userId,\r\n    cardSelector,\r\n    { handleCardClick,\r\n    handleLikeCardClick,\r\n    /* { handleAddLikeClick,\r\n    handleDeleteLikeClick, */\r\n    handleDeleteCardClick }) {\r\n    this._name = data.name;\r\n    this._link = data.link;\r\n    this._likes = data.likes;\r\n    this._cardId = data._id; // кажется у меня что-то со зрением. или всё же с головой\r\n    this._ownerId = data.owner._id;\r\n    this._userId = userId;\r\n    this._cardSelector = cardSelector;\r\n    this._handleCardClick = handleCardClick;\r\n    this.handleLikeCardClick = handleLikeCardClick;\r\n    /* this.handleAddLikeClick = handleAddLikeClick;\r\n    this.handleDeleteLikeClick = handleDeleteLikeClick; */\r\n    this.handleDeleteCardClick = handleDeleteCardClick;\r\n  }\r\n\r\n  // Метод возврата шаблона DOM-разметки\r\n  _getTemplate() {\r\n    const cardElement = document\r\n    .querySelector(this._cardSelector)\r\n    .content\r\n    .querySelector('.element')\r\n    .cloneNode(true);\r\n    \r\n    return cardElement;\r\n  }\r\n\r\n  // Метод добавления новой карточки\r\n  generateCard() {\r\n    this._cardContainer = this._getTemplate();\r\n    this._cardImage = this._cardContainer.querySelector('.element__image');\r\n    this._cardTitle = this._cardContainer.querySelector('.element__title');\r\n    this._cardMark = this._cardContainer.querySelector('.element__mark');\r\n    this._cardMarkCounter = this._cardContainer.querySelector('.element__mark-counter');\r\n    this._cardTrash = this._cardContainer.querySelector('.element__trash');\r\n\r\n    // Прописываем связи между объектами массива и свойствами, \r\n    // присвоенными элементам страницы\r\n    this._cardImage.src = this._link;\r\n    this._cardImage.alt = this._name;\r\n    this._cardTitle.textContent = this._name;\r\n\r\n    this._showDeleteButtonState();\r\n    this._setEventListeners();\r\n    this._checkCardLike();\r\n\r\n    return this._cardContainer;\r\n  }\r\n\r\n  // Слушатели срабатывания методов\r\n  _setEventListeners() {\r\n    this._cardImage.addEventListener('click', () => {\r\n      this._handleCardClick(this._name, this._link);\r\n    });\r\n    this._cardMark.addEventListener('click', () => {\r\n      \r\n      this.handleLikeCardClick(this._cardId);\r\n\r\n      /* if(this._cardMark.classList.add('element__mark_active')) {\r\n        this.handleDeleteLikeClick(this._cardId);\r\n      } else {\r\n        this.handleAddLikeClick(this._cardId);\r\n      } */\r\n\r\n    });\r\n    this._cardTrash.addEventListener('click', () => {\r\n      this.handleDeleteCardClick(this._cardId);\r\n    });\r\n  }\r\n\r\n  // Проверка наличия лайков на карточке\r\n  _checkCardLike() {\r\n    this._likes.forEach((element) => {\r\n      if (element._id === this._userId) {\r\n        this._cardMark.classList.add('element__mark_active');\r\n      }\r\n    });\r\n  }\r\n\r\n  isLiked() {\r\n    console.log( typeof isLiked);\r\n    return Boolean(this._likes.find((element) => {\r\n      return this._userId === element._id;\r\n    })\r\n  )}\r\n\r\n  \r\n\r\n  updateLikesCounter(data) {\r\n    this._likes = data.likes;\r\n    this._cardMarkCounter.textContent = this._likes.length;\r\n  }\r\n  \r\n  addLike() {\r\n    this._cardMark.classList.add('element__mark_active');\r\n  }\r\n\r\n  deleteLike() {\r\n    this._cardMark.classList.remove('element__mark_active');\r\n  }\r\n\r\n  /* _handleLikeCardClick() {\r\n    if(this._cardMark.classList.add('element__mark_active')) {\r\n      this.handleDeleteLikeClick(this._cardId);\r\n    } else {\r\n      this.handleAddLikeClick(this._cardId);\r\n    }\r\n  } */\r\n\r\n  /* // Оператор increment (++) добавляет единицу \r\n  // к своему операнду и возвращает значение\r\n  addLike() {\r\n    this._cardMark.classList.add('element__mark_active');\r\n    this._cardMarkCounter.textContent = ++this._like;\r\n  }\r\n\r\n  // Оператор decrement (--) вычитает единицу \r\n  // из своего операнда и возвращает значение\r\n  deleteLike() {\r\n    this._cardMark.classList.remove('element__mark_active');\r\n    this._cardMarkCounter.textContent = --this._like;\r\n  } */\r\n\r\n    // Только добавлявший карточку сможет её удалить\r\n  // в противном случае иконка корзины не видна\r\n  _showDeleteButtonState() {\r\n    if (this._userId !== this._ownerId) {\r\n      this._cardTrash.remove();\r\n    }\r\n  }\r\n\r\n  // Метод удаления карточки\r\n  deleteCard() {\r\n    this._cardContainer.remove();\r\n    this._cardContainer = null;\r\n  }\r\n}","export default class FormValidator {\r\n\r\n  constructor(config, form) {\r\n    this._config = config;\r\n    this._form = form;\r\n    this._inputElement = config.inputSelector;\r\n    this._buttonElement = form.querySelector(config.submitButtonSelector);\r\n    this._inactiveButtonClass = config.inactiveButtonClass;\r\n    this._inputErrorClass = config.inputErrorClass;\r\n    this._errorMessageClass = config.errorMessageClass;\r\n    this._inputList = Array.from(form.querySelectorAll(config.inputSelector));\r\n  }\r\n\r\n  // Метод очистки полей ввода (на передачу в index.js)\r\n  removeInputError() {\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n  }\r\n\r\n  // Метод показа сообщения об ошибке при валидации\r\n  _showInputError (inputElement, errorMessage) {\r\n    const errorElement = this._form.querySelector(`#${inputElement.id}-error`);\r\n    inputElement.classList.add(this._inputErrorClass);\r\n    errorElement.classList.add(this._errorMessageClass);\r\n    errorElement.textContent = errorMessage;\r\n  }\r\n\r\n  // Метод сокрытия сообщения об ошибке при валидации\r\n  _hideInputError(inputElement) {\r\n    const errorElement = this._form.querySelector(`#${inputElement.id}-error`);\r\n    inputElement.classList.remove(this._inputErrorClass);\r\n    errorElement.classList.remove(this._errorMessageClass);\r\n    errorElement.textContent = '';\r\n  };\r\n\r\n  // Метод проверки поля ввода на валидность\r\n  _checkInputValidity(inputElement) {\r\n    if (!inputElement.validity.valid) {\r\n      this._showInputError(inputElement, inputElement.validationMessage);\r\n    } else {\r\n      this._hideInputError(inputElement);\r\n    }\r\n  };\r\n\r\n  // Метод условий состояния кнопки сохранения данных формы (на передачу в index.js)\r\n  toggleButtonState() {\r\n    if (this._form.checkValidity()) {\r\n      this._buttonElement.removeAttribute('disabled');\r\n      this._buttonElement.classList.remove(this._inactiveButtonClass);\r\n    } else {\r\n      this._buttonElement.disabled = true;\r\n      this._buttonElement.classList.add(this._inactiveButtonClass);\r\n    }\r\n  }\r\n\r\n  // Метод проверки на валидацию нескольких полей ввода\r\n  _setEventListeners() {\r\n    this.toggleButtonState();\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', () => {\r\n        this._checkInputValidity(inputElement);\r\n        this.toggleButtonState();\r\n      });\r\n    });\r\n  }\r\n  \r\n  // Метод включения валидации формы\r\n  enableValidation() {\r\n    // Отмена стандартного поведения формы перенесена в модуль PopupWithForm\r\n    this._setEventListeners();\r\n  };\r\n}","export default class Section {\r\n  constructor({ renderer }, conteinerSelector) {\r\n    this._renderer = renderer; // renderer — это функция\r\n    this._container = document.querySelector(conteinerSelector);\r\n  }\r\n\r\n  addAppend(item) {\r\n    this._container.append(item);\r\n  }\r\n\r\n  addPrepend(item) {\r\n    this._container.prepend(item);\r\n  }\r\n\r\n  renderItems(items) {\r\n    items.forEach(item => {\r\n      this._renderer(item); // вызываем renderer, передав item\r\n    });\r\n  }\r\n\r\n  /* renderItems(items) {\r\n    items.forEach(item => {\r\n      const element = this._renderer(item);\r\n      this.addItem(element);\r\n    })\r\n  }\r\n\r\n  addItem(item, isInversed = false) {\r\n    if (isInversed) {\r\n      this._container.prepend(item);\r\n    } else {\r\n      this._container.append(item);\r\n    }\r\n  } */\r\n}","export default class Popup {\r\n  \r\n  constructor(popupSelector) {\r\n    this._popup = document.querySelector(popupSelector);\r\n  }\r\n\r\n  /**\r\n   * Метод открытия модальных окон\r\n   */\r\n  open() {\r\n    this._popup.classList.add('popup_activ');\r\n    document.addEventListener(`keydown`, this._handleEscClose);\r\n  }\r\n\r\n  /**\r\n   * Метод закрытия модальных окон\r\n   */\r\n  close() {\r\n    this._popup.classList.remove('popup_activ');\r\n    document.addEventListener(`keydown`, this._handleEscClose);\r\n  }\r\n\r\n  /**\r\n   * Метод закрытия модальных окон нажатием на клавишу \"Esc\"\r\n   * @param {Event} e event\r\n   */\r\n  _handleEscClose = (e) => {\r\n    if (e.key === 'Escape') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Универсальный метод закрытия модальных окон \r\n   * нажатием на оверлей или \"крестик\" модального окна\r\n   */\r\n  _handlePopupClose = (e) => {\r\n    if (e.target.classList.contains('popup_activ') || e.target.classList.contains('popup__close-button')) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Добавляем слушатели клика для закрытия попапа (разными способами)\r\n   */\r\n  setEventListeners() {\r\n    this._popup.addEventListener('mousedown', this._handlePopupClose);\r\n  }\r\n}","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    this._popupImage = this._popup.querySelector('.popup__image');\r\n    this._popupCaption = this._popup.querySelector('.popup__caption');\r\n  }\r\n\r\n  open(name, link) {\r\n    this._popupCaption.textContent = name;\r\n    this._popupImage.alt = name;\r\n    this._popupImage.src = link;\r\n    super.open();\r\n  }\r\n}","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithForm extends Popup {\r\n  \r\n  /**\r\n   * Кроме селектора попапа принимает в конструктор колбэк сабмита формы\r\n   */\r\n  constructor(popupSelector, { submitForm }) {\r\n    super(popupSelector);\r\n    this._submitForm = submitForm;\r\n    this._popupForm = this._popup.querySelector('.popup__form');\r\n    this._inputList = this._popupForm.querySelectorAll('.popup__input');\r\n    this._submitButton = this._popup.querySelector('.popup__save-button');\r\n  }\r\n\r\n  /**\r\n   * @returns сбор данных всех полей формы\r\n   * результатом является обект в котором находятся все данные\r\n   */\r\n  _getInputValues() {\r\n    this._inputsСontent = {};\r\n    this._inputList.forEach(input => {\r\n      this._inputsСontent[input.name] = input.value;\r\n    });\r\n    return this._inputsСontent;\r\n  }\r\n\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._popupForm.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n      this._submitForm(this._getInputValues());\r\n    })\r\n  }\r\n\r\n  // Метод изменения кнопки в момент отправки формы на сервер\r\n  processLoading() {\r\n    this._submitButton.textContent = 'Сохранение...';\r\n    this._submitButton.disabled = true;\r\n  }\r\n\r\n  // Обычное состояние кнопки отправки\r\n  normalCondition() {\r\n    this._submitButton.textContent = 'Сохранить';\r\n      this._submitButton.disabled = false;\r\n  }\r\n  \r\n  /**\r\n   * Перезапись родительского метода close, \r\n   * так как форма должна ещё и сбрасываться\r\n   * Чувствую, что тут есть проблема, \r\n   * так как пользователь не должен видеть \r\n   * процесс очистки формы до её закрытия...\r\n   * Пока не получается её решить.\r\n   * \r\n   * На ревью 8ПР мне не подсказали. Прямо ведь не спросишь :'(\r\n   */\r\n  close() {\r\n    super.close();\r\n    this._popupForm.reset();\r\n  }\r\n}","import Popup from './Popup.js'\r\n\r\nexport default class PopupWithСonfirmation extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    //this._submitForm = submitForm;\r\n    this._submitForm = this._popup.querySelector('.popup__form_type_confirmation');;\r\n    this._submitButton = this._popup.querySelector('.popup__save-button');\r\n  }\r\n\r\n  setSubmit(targetSubmit) {\r\n    this._submitHandlerCallback = targetSubmit;\r\n  }\r\n  \r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._submitButton.addEventListener('click', (e) => {\r\n      //this._submitForm.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      this._submitButton(this._submitHandlerCallback);\r\n      //this._submitHandlerCallback();\r\n    });\r\n  }\r\n\r\n  // Метод изменения кнопки в момент отправки формы на сервер\r\n  processLoading() {\r\n    this._submitButton.textContent = 'Исполняю...';\r\n    this._submitButton.disabled = true;\r\n  }\r\n\r\n  // Обычное состояние кнопки отправки\r\n  normalCondition() {\r\n    this._submitButton.textContent = 'Да';\r\n      this._submitButton.disabled = false;\r\n  }\r\n}","export default class UserInfo {\r\n\r\n  /**\r\n   * Конструктор принимает в себя\r\n   * @param {object} объект с селекторами двух элементов:\r\n   * элемента имени пользователя и элемента информации о себе\r\n   */\r\n  constructor({userName, userActivityType, userAvatar}) {\r\n    this._userName = document.querySelector(userName);\r\n    this._userActivityType = document.querySelector(userActivityType);\r\n    this._userAvatar = document.querySelector(userAvatar);\r\n  }\r\n\r\n  /**\r\n   * Метод, который\r\n   * @returns {object} объект с данными пользователя\r\n   * Этот метод пригодится когда данные пользователя нужно будет \r\n   * подставить в форму при открытии модального окна с данными профиля\r\n   */\r\n  getUserInfo() {\r\n    return {\r\n      userName: this._userName.textContent,\r\n      userActivityType: this._userActivityType.textContent,\r\n      userAvatar: this._userAvatar.src\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Метод, принимающий новые данные пользователя\r\n   * и добавляет их на страницу при сабмите\r\n   */\r\n  setUserInfo(userName, userActivityType) {\r\n    this._userName.textContent = userName;\r\n    this._userActivityType.textContent = userActivityType;\r\n  }\r\n  \r\n  setUserData(userInfo) {\r\n    this._userName._id = userInfo._id;\r\n    this._userName.textContent = userInfo.name;\r\n    this._userActivityType.textContent = userInfo.about;\r\n    this._userAvatar.src = userInfo.avatar;\r\n  }\r\n\r\n  setUserInfoAvatar(userInfoAvatar) {\r\n   this._userAvatar.src = userInfoAvatar.avatar;\r\n   userInfoAvatar.avatar.classList.add('.profile__avatar');\r\n  }\r\n}","export default class Api {\r\n  constructor({ url, token }) {\r\n    this._url = url;\r\n    this._token = token;\r\n  }\r\n\r\n  // \"res\" в парамете - это значит \"response\"\r\n  _ringingServer(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n      // если ошибка, отклоняем промис\r\n    return Promise.reject(`Возникла ошибка ${res.status}`);\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  setUserInfo(name, about) {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: about\r\n      })\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  setUserAvatar(link) {\r\n    return fetch(`${this._url}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: link\r\n      })\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  addNewCard(data) {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        link: data.link\r\n      })\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  removeCard(_id) {\r\n    return fetch(`${this._url}/cards/${_id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  setLikeCard(_id) {\r\n    return fetch(`${this._url}/cards/${_id}/likes`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n\r\n  deleteLikeCard(_id) {\r\n    return fetch(`${this._url}/cards/${_id}/likes`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-type': 'application/json', \r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => this._ringingServer(res))\r\n    .then((result) => {\r\n      return result;\r\n    })\r\n  }\r\n}","// DOM-ЭЛЕМЕНТЫ !!!\r\n\r\n// Кнопки\r\nexport const buttonEdit = document.querySelector('.profile-info__editing-button'); //Нашли кнопку редактирования профиля\r\nexport const buttonAdd = document.querySelector('.profile__add-button'); //Нашли кнопку добавления карточки\r\nexport const buttonAvatar = document.querySelector('.profile-info__avatar-button');\r\n\r\n// Формы, отображенные на странице\r\nexport const formUserData = document.querySelector('.profile-info__data');//нашли форму с данными профиля пользователя\r\nexport const popupFormUserData = document.querySelector('.popup__form_type_user-data');//Форма с данными профиля пользователя\r\nexport const popupFormNewCard = document.querySelector('.popup__form_type_new-card');//Форма с данными новой карточки с картинкой\r\nexport const popupFormAddAvatar = document.querySelector('.popup__form_type_avatar');\r\n\r\n// Поля заполнения данных ПРОФИЛЯ в модальном окне\r\nexport const popupUserName = popupFormUserData.querySelector('.popup__input_content_name');//Поле с именем пользователя\r\nexport const popupUserActivityType = popupFormUserData.querySelector('.popup__input_content_activity-type');//Поле с родом деятельности пользователя\r\n\r\n// СЕЛЕКТОРЫ !!!\r\n\r\n// Конфигурационный файл валидации\r\nexport const config = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__save-button',\r\n  inactiveButtonClass: 'popup__save-button_disabled',\r\n  inputErrorClass: 'popup__input_error',\r\n  errorMessageClass: 'popup__validation-message_active'\r\n};","import '../pages/index.css'; // добавил импорт главного файла стилей для нормальной работы «Вебпака»!!!\r\n//import initialCards from '../scripts/utils/initialCards.js'; // импорт массива исходного массива изображений\r\n\r\n// Импорт подключаемых модулей\r\nimport Card from '../scripts/components/Card.js';\r\nimport FormValidator from '../scripts/components/FormValidator.js';\r\nimport Section from '../scripts/components/Section.js';\r\nimport PopupWithImage from '../scripts/components/PopupWithImage.js';\r\nimport PopupWithForm from '../scripts/components/PopupWithForm.js';\r\nimport PopupWithСonfirmation from '../scripts/components/PopupWithСonfirmation.js';\r\nimport UserInfo from '../scripts/components/UserInfo.js';\r\nimport Api from '../scripts/components/Api.js';\r\n\r\n// Импорт значений переменных, используемых для реализации работы модулей\r\nimport {\r\n  buttonEdit,\r\n  buttonAdd,\r\n  buttonAvatar,\r\n  popupFormUserData,\r\n  popupUserName,\r\n  popupUserActivityType,\r\n  popupFormNewCard,\r\n  popupFormAddAvatar,\r\n  config\r\n} from '../scripts/utils/constants.js';\r\n\r\n// Создание экземпляров класса FormValidator для каждой формы\r\nconst popupFormUserDataValidator = new FormValidator(config, popupFormUserData);\r\nconst popupFormNewCardValidator = new FormValidator(config, popupFormNewCard);\r\nconst popupFormAddAvatarValidator = new FormValidator(config, popupFormAddAvatar);\r\n\r\n// Вызов соответствующих свойств у оных объектов\r\npopupFormUserDataValidator.enableValidation();\r\npopupFormNewCardValidator.enableValidation();\r\npopupFormAddAvatarValidator.enableValidation();\r\n\r\n// Создание экземпляра класса Api\r\nconst api = new Api({\r\n  url: 'https://mesto.nomoreparties.co/v1/cohort-43',\r\n  token: '10bf8282-16d5-46f1-976c-28311168fc94'\r\n})\r\n\r\n// Создание экземпляра класса с презентируемой картокой\r\nconst showImagePopup = new PopupWithImage('.popup_task_show-image');\r\nshowImagePopup.setEventListeners();\r\n\r\n// Создание экземпляра класса подтверждения удаления карточки\r\nconst popupDeleteCard = new PopupWithСonfirmation('.popup_type_confirmation');\r\npopupDeleteCard.setEventListeners();\r\n\r\nlet userId;\r\nconsole.log(userId);\r\n\r\n/**\r\n * Передаём массив с промисами методу Promise.all\r\n * и получаем данные с сервера\r\n */\r\nPromise.all([api.getUserInfo(), api.getInitialCards()])\r\n  .then(([userData, initialCardsData]) => {\r\n    userId = userData;\r\n    userInfo.setUserData(userData);\r\n    photoLibrary.renderItems(initialCardsData);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  })\r\n\r\nconst photoLibrary = new Section({\r\n  renderer: (item) => {\r\n      photoLibrary.addAppend(createCard(item));\r\n  }\r\n}, '.elements');\r\n\r\n// Создание экземпляра класса Card\r\nfunction createCard(data) {\r\n  const card = new Card( {data}, userId, '.template',\r\n  \r\n  { handleCardClick: (name, link) => {\r\n      showImagePopup.open(name, link);\r\n      },\r\n  \r\n    handleLikeCardClick: (card) => {\r\n      console.log(card.isLiked)\r\n      if (card.isLiked()) {\r\n        api.deleteLikeCard(card)\r\n          .then((data) => {\r\n            card.updateLikesCounter(data);\r\n            card.deleteLike();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Тут какая-то ошибка c удалением лайка ${err}`)\r\n          })\r\n        } else {\r\n        api.setLikeCard(card)\r\n          .then((data) => {\r\n            card.updateLikesCounter(data);\r\n            card.addLike();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Тут какая-то ошибка c добавлением лайка ${err}`)\r\n          })\r\n        }\r\n      },\r\n\r\n    handleDeleteCardClick: (card) => {\r\n    popupDeleteCard.open();\r\n    popupDeleteCard.setSubmit(() => {\r\n      popupDeleteCard.processLoading();\r\n      api.removeCard(card)\r\n        .then(() => {\r\n          popupDeleteCard.close();\r\n          card.deleteCard();\r\n        })\r\n        .catch((err) => {\r\n          console.log(`Тут какая-то ошибка с удалением карточки ${err}`)\r\n        })\r\n        .finally(() => \r\n        popupDeleteCard.normalCondition())\r\n      })\r\n    }\r\n  });\r\n  \r\n  /* { handleAddLikeClick: (card) => {\r\n      api.setLikeCard(card)\r\n      .then((data) => {\r\n        card.updateLikesCounter(data);\r\n        card.addLike();\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка c добавлением лайка ${err}`)\r\n      })\r\n    }\r\n  },\r\n  { handleDeleteLikeClick: (card) => {\r\n      api.deleteLikeCard(card)\r\n      .then((data) => {\r\n        card.updateLikesCounter(data);\r\n        card.deleteLike();\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка c удалением лайка ${err}`)\r\n      })\r\n    }\r\n  } */\r\n\r\n  return card.generateCard();\r\n}\r\n\r\n// Функция открытия модального окна кнопкой добавления карточки\r\nbuttonAdd.addEventListener('click', () => {\r\n  popupFormNewCard.reset();\r\n  popupFormNewCardValidator.removeInputError();\r\n  popupFormNewCardValidator.toggleButtonState();\r\n  popupFormAdd.open();\r\n});\r\n\r\nconst popupFormAdd = new PopupWithForm('.popup_task_add',\r\n  { submitForm: (cardData) => {\r\n    popupFormAdd.processLoading();\r\n    api.addNewCard({\r\n      name: cardData['card-title'],\r\n      link: cardData['picture-link']\r\n      })\r\n      .then((res) => {\r\n        popupFormAdd.close();\r\n        photoLibrary.addPrepend(createCard(res));\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка ${err}`)\r\n      })\r\n      .finally(() => {\r\n        popupFormAdd.normalCondition();\r\n      });\r\n    }\r\n  }\r\n)\r\n\r\n// Создание экземпляра класса с данными пользователя\r\nconst userInfo = new UserInfo({\r\n  userName: '.profile-info__name',\r\n  userActivityType: '.profile-info__activity-type',\r\n  userAvatar: '.profile-info__avatar'\r\n});\r\n\r\n// Функция получения значений инпутов \r\n// при открытии попапа формы редактирования профиля\r\nfunction getInputValuesFormEdit() {\r\n  const userData = userInfo.getUserInfo();\r\n  popupUserName.value = userData.userName;// поле \"введите ваше имя\" фигурируют данные ранее указанные в имени пользователя профиля\r\n  popupUserActivityType.value = userData.userActivityType;// в поле \"каков род ваших занятий\" фигурируют данные ранее указанные в соответствующем поле профиля\r\n}\r\n\r\n// Реализация функции редактирования данных профиля\r\n// функция показывающая, что при открытии модального окна мы видим\r\nbuttonEdit.addEventListener('click', () => {  \r\n  getInputValuesFormEdit(); //вызов функции получения значений инпутов при открытии попапа\r\n  popupFormUserDataValidator.removeInputError();\r\n  popupFormUserDataValidator.toggleButtonState();\r\n  popupFormEdit.open();\r\n});\r\n\r\nconst popupFormEdit = new PopupWithForm('.popup_task_edit',\r\n  { submitForm: (profileData) => {\r\n    popupFormEdit.processLoading();\r\n    api.setUserInfo(\r\n      profileData['profile_name'],\r\n      profileData['type_of_activity']\r\n      )\r\n      .then((profileData) => {\r\n        popupFormEdit.close();\r\n        userInfo.setUserInfo(\r\n          profileData.name,\r\n          profileData.about\r\n        )\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка ${err}`)\r\n      })\r\n      .finally(() => {\r\n        popupFormEdit.normalCondition();\r\n      });\r\n    }\r\n  }\r\n)\r\n\r\nbuttonAvatar.addEventListener('click', () => {\r\n  popupFormAddAvatar.reset();\r\n  popupFormAddAvatarValidator.removeInputError();\r\n  popupFormAddAvatarValidator.toggleButtonState();\r\n  popupFormAvatar.open();\r\n});\r\n\r\n// Создание экземпляра класса формы добавления карточки\r\nconst popupFormAvatar = new PopupWithForm('.popup_task_avatar',\r\n  { submitForm: (profileData) => {\r\n    popupFormAvatar.processLoading();\r\n    api.setUserAvatar(profileData['profile-avatar'])\r\n      .then((res) => {\r\n        popupFormAvatar.close();\r\n        userInfo.setUserInfoAvatar(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Тут какая-то ошибка ${err}`)\r\n      })\r\n      .finally(() => {\r\n        popupFormAvatar.normalCondition();\r\n      });\r\n    }\r\n  }\r\n);\r\n\r\n// Навешиваем слушатели на экземпляры классов форм\r\npopupFormEdit.setEventListeners();\r\npopupFormAdd.setEventListeners();\r\npopupFormAvatar.setEventListeners();"],"names":["Card","userId","cardSelector","data","handleCardClick","handleLikeCardClick","handleDeleteCardClick","this","_name","name","_link","link","_likes","likes","_cardId","_id","_ownerId","owner","_userId","_cardSelector","_handleCardClick","document","querySelector","content","cloneNode","_cardContainer","_getTemplate","_cardImage","_cardTitle","_cardMark","_cardMarkCounter","_cardTrash","src","alt","textContent","_showDeleteButtonState","_setEventListeners","_checkCardLike","addEventListener","forEach","element","classList","add","console","log","isLiked","Boolean","find","length","remove","FormValidator","config","form","_config","_form","_inputElement","inputSelector","_buttonElement","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorMessageClass","errorMessageClass","_inputList","Array","from","querySelectorAll","inputElement","_hideInputError","errorMessage","errorElement","id","validity","valid","_showInputError","validationMessage","checkValidity","removeAttribute","disabled","toggleButtonState","_checkInputValidity","Section","conteinerSelector","renderer","_renderer","_container","item","append","prepend","items","Popup","popupSelector","e","key","close","target","contains","_popup","_handleEscClose","_handlePopupClose","PopupWithImage","_popupImage","_popupCaption","PopupWithForm","submitForm","_submitForm","_popupForm","_submitButton","_inputsСontent","input","value","preventDefault","_getInputValues","reset","PopupWithСonfirmation","targetSubmit","_submitHandlerCallback","UserInfo","userName","userActivityType","userAvatar","_userName","_userActivityType","_userAvatar","userInfo","about","avatar","userInfoAvatar","Api","url","token","_url","_token","res","ok","json","Promise","reject","status","fetch","method","headers","authorization","then","_ringingServer","result","body","JSON","stringify","buttonEdit","buttonAdd","buttonAvatar","popupFormUserData","popupFormNewCard","popupFormAddAvatar","popupUserName","popupUserActivityType","formSelector","popupFormUserDataValidator","popupFormNewCardValidator","popupFormAddAvatarValidator","enableValidation","api","showImagePopup","setEventListeners","popupDeleteCard","all","getUserInfo","getInitialCards","userData","initialCardsData","setUserData","photoLibrary","renderItems","catch","err","addAppend","createCard","card","open","deleteLikeCard","updateLikesCounter","deleteLike","setLikeCard","addLike","setSubmit","processLoading","removeCard","deleteCard","finally","normalCondition","generateCard","removeInputError","popupFormAdd","cardData","addNewCard","addPrepend","popupFormEdit","profileData","setUserInfo","popupFormAvatar","setUserAvatar","setUserInfoAvatar"],"sourceRoot":""}